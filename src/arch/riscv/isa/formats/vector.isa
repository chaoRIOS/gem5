// Copyright (c) 2020 Barcelona Supercomputing Center
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Author: Cristóbal Ramírez

// Basic instruction class constructor template.
def template VectorArith1SrcConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, VectorArith1SrcOp)
    {
        flags[IsVector] = true;
    }
}};

def template VectorArith2SrcConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, VectorArith2SrcOp)
    {
        flags[IsVector] = true;
    }
}};

def template VectorArith3SrcConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, VectorArith3SrcOp)
    {
        flags[IsVector] = true;
    }
}};

def template VectorMaskLogicalConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, VectorMaskLogicalOp)
    {
        flags[IsVector] = true;
    }
}};

def template VectorReductionConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, VectorReductionOp)
    {
        flags[IsVector] = true;
    }
}};

def template VectorConvertIntToFPConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, VectorConvertIntToFPOp)
    {
        flags[IsVector] = true;
    }
}};

def template VectorConvertFPToIntConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, VectorConvertFPToIntOp)
    {
        flags[IsVector] = true;
    }
}};

def template VectorWConvertFPToIntConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, VectorWConvertFPToIntOp)
    {
        flags[IsVector] = true;
    }
}};

def template VectorWConvertIntToFPConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, VectorWConvertIntToFPOp)
    {
        flags[IsVector] = true;
    }
}};

def template VectorWConvertFPToFPConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, VectorWConvertFPToFPOp)
    {
        flags[IsVector] = true;
    }
}};

def template VectorNConvertFPToIntConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, VectorNConvertFPToIntOp)
    {
        flags[IsVector] = true;
    }
}};

def template VectorNConvertIntToFPConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, VectorNConvertIntToFPOp)
    {
        flags[IsVector] = true;
    }
}};

def template VectorNConvertFPToFPConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, VectorNConvertFPToFPOp)
    {
        flags[IsVector] = true;
    }
}};

def template VectorFPCompareConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, VectorFPCompareOp)
    {
        flags[IsVector] = true;
    }
}};

def template VectorIntCompareConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, VectorIntCompareOp)
    {
        flags[IsVector] = true;
    }
}};

def template VectorSlideUpConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, VectorSlideUpOp)
    {
        flags[IsVector] = true;
    }
}};

def template VectorSlideDownConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, VectorSlideDownOp)
    {
        flags[IsVector] = true;
    }
}};

def template VectorMemoryStoreConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, VectorMemoryStoreOp)
    {
        flags[IsVector] = true;
    }
}};

def template VectorMemoryLoadConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, VectorMemoryLoadOp)
    {
        flags[IsVector] = true;
    }
}};

def template VectorConfigConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, VectorConfigOp)
    {
        %(constructor)s;
        flags[IsVector] = true;
        //vecflags[IsVecConfigOp] = true;
    }
}};

def template VectorToScalarConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, VectorToScalarOp)
    {
        flags[IsVector] = true;
    }
}};

def template VectorRegisterMoveConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, VectorRegisterMoveOp)
    {
        flags[IsVector] = true;
    }
}};

def template VectorIntegerWideningConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, VectorIntegerWideningOp)
    {
        flags[IsVector] = true;
    }
}};

// Basic instruction class execute method template.
def template VectorExecute {{
    Fault
    %(class_name)s::execute(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        panic("Vector instruction had it's execute() called!");
        return NoFault;
    }
}};


// Generate the Code Blocks from templates/decoder
def format VectorData1SrcOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorDataOp', '')
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorArith1SrcConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorData2SrcOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorDataOp', '')
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorArith2SrcConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorData3SrcOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorDataOp', '')
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorArith3SrcConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorMaskLogicalOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorDataOp', '')
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorMaskLogicalConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorReductionOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorDataOp', '')
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorReductionConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorConvertIntToFPOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorDataOp', '')
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorConvertIntToFPConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorConvertFPToIntOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorDataOp', '')
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorConvertFPToIntConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorWConvertFPToIntOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorDataOp', '')
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorWConvertFPToIntConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorWConvertIntToFPOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorDataOp', '')
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorWConvertIntToFPConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorWConvertFPToFPOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorDataOp', '')
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorWConvertFPToFPConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorNConvertFPToIntOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorDataOp', '')
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorNConvertFPToIntConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorNConvertIntToFPOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorDataOp', '')
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorNConvertIntToFPConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorNConvertFPToFPOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorDataOp', '')
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorNConvertFPToFPConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorFPCompareOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorDataOp', '')
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorFPCompareConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorIntCompareOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorDataOp', '')
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorIntCompareConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorSlideDownOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorDataOp', '')
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorSlideDownConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorSlideUpOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorDataOp', '')
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorSlideUpConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorConfigOp( *vecflags) {{
    iop = InstObjParams(name, Name, 'RiscvVectorCfgOp', vecflags)
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorConfigConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorMemStoreOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorMemOp')
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorMemoryStoreConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorMemLoadOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorMemOp')
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorMemoryLoadConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorToScalarOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorToScalarOp')
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorToScalarConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorRegisterMoveOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorRegisterMoveOp')
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorRegisterMoveConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorIntegerWideningOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorIntegerWideningOp')
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorIntegerWideningConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};
