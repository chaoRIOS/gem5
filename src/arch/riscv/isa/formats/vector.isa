// Copyright (c) 2020 Barcelona Supercomputing Center
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Author: Cristóbal Ramírez

// Basic instruction class constructor template.
def template VectorArithConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, %(op_class)s)
    {
        %(set_reg_idx_arr)s;
        %(constructor)s;
        
        if ((func3()==4) || (func3()==6)) {
            setSrcRegIdx(_numSrcRegs++, RegId(IntRegClass, vs1()));
        } else if ((func3()==5)) {
            setSrcRegIdx(_numSrcRegs++, RegId(FloatRegClass, vs1()));
        }

        flags[IsVector] = true;
    }
}};

def template VectorConfigConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, VectorConfigOp)
    {
        %(set_reg_idx_arr)s;
        %(constructor)s;

        if (getName() == "vsetivli") {
            setDestRegIdx(_numDestRegs++, RegId(IntRegClass, vd()));
        } else if (getName() == "vsetvli"){
            setSrcRegIdx(_numSrcRegs++, RegId(IntRegClass, vs1()));
            setDestRegIdx(_numDestRegs++, RegId(IntRegClass, vd()));
        } else if (getName() == "vsetvl"){
            setSrcRegIdx(_numSrcRegs++, RegId(IntRegClass, vs1()));
            setSrcRegIdx(_numSrcRegs++, RegId(IntRegClass, vs2()));
            setDestRegIdx(_numDestRegs++, RegId(IntRegClass, vd()));
        }

        flags[IsVector] = true;
    }
}};

def template VectorMemoryConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, %(op_class)s)
    {
        %(set_reg_idx_arr)s;
        %(constructor)s;

        if(mop()==2) { 
            // Strided memory access
            /* 
            * TODO: is still pending strided which uses rs2 as
            * second operand.
            */
            setSrcRegIdx(_numSrcRegs++, RegId(IntRegClass, vs1()));
            setSrcRegIdx(_numSrcRegs++, RegId(IntRegClass, vs2()));
          } else {
            setSrcRegIdx(_numSrcRegs++, RegId(IntRegClass, vs1()));
          }
    }
}};

def template VectorToScalarConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, VectorToScalarOp)
    {
        %(set_reg_idx_arr)s;
        %(constructor)s;
        
        if (func3() == 1) {
            // vfmv_fs
            setDestRegIdx(_numDestRegs++, RegId(FloatRegClass, vd()));
        } else if (func3() == 2) {
            if (vs1() == 0) {
                // vmv_xs
                setDestRegIdx(_numDestRegs++, RegId(IntRegClass, vd()));
            } else if (vs1() == 0x10) {
                // vcpop
                setDestRegIdx(_numDestRegs++, RegId(IntRegClass, vd()));
            } else if (vs1() == 0x11) {
                // vfirst
                setDestRegIdx(_numDestRegs++, RegId(IntRegClass, vd()));
            }
        } else if (func3() == 5) {
            // vfmv_sf
            setSrcRegIdx(_numSrcRegs++, RegId(FloatRegClass, vs1()));
        } else if (func3() == 6) {
            // vmv_sx
            setSrcRegIdx(_numSrcRegs++, RegId(IntRegClass, vs1()));
        }

        flags[IsVector] = true;
    }
}};

def template VectorRegisterMoveConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, VectorRegisterMoveOp)
    {
        %(set_reg_idx_arr)s;
        %(constructor)s;
        flags[IsVector] = true;
    }
}};

def template VectorIntegerWideningConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, VectorIntegerWideningOp)
    {
        %(set_reg_idx_arr)s;
        %(constructor)s;
        
        if (func3()==0x6) {
            setSrcRegIdx(_numSrcRegs++, RegId(IntRegClass, vs1()));
        }

        flags[IsVector] = true;
    }
}};

// Basic instruction class execute method template.
def template VectorExecute {{
    Fault
    %(class_name)s::execute(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        panic("Vector instruction had it's execute() called!");
        return NoFault;
    }
}};


// Generate the Code Blocks from templates/decoder
def format VectorArith1SrcOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorArithOp', '', ['VectorArith1SrcOp'])
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorArithConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format  VectorArith2SrcOp() {{
    iop =InstObjParams(name, Name, 'RiscvVectorArithOp', '', ['VectorArith2SrcOp'])
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorArithConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorArith3SrcOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorArithOp', '', ['VectorArith3SrcOp'])
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorArithConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorMaskLogicalOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorArithOp', '', ['VectorMaskLogicalOp'])
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorArithConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorReductionOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorArithOp', '', ['VectorReductionOp'])
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorArithConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorConvertIntToFPOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorArithOp', '', ['VectorConvertIntToFPOp'])
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorArithConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorConvertFPToIntOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorArithOp', '', ['VectorConvertFPToIntOp'])
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorArithConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorWConvertFPToIntOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorArithOp', '', ['VectorWConvertFPToIntOp'])
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorArithConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorWConvertIntToFPOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorArithOp', '', ['VectorWConvertIntToFPOp'])
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorArithConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorWConvertFPToFPOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorArithOp', '', ['VectorWConvertFPToFPOp'])
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorArithConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorNConvertFPToIntOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorArithOp', '', ['VectorNConvertFPToIntOp'])
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorArithConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorNConvertIntToFPOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorArithOp', '', ['VectorNConvertIntToFPOp'])
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorArithConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorNConvertFPToFPOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorArithOp', '', ['VectorNConvertFPToFPOp'])
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorArithConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorFPCompareOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorArithOp', '', ['VectorFPCompareOp'])
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorArithConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorIntCompareOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorArithOp', '', ['VectorIntCompareOp'])
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorArithConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorSlideDownOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorArithOp', '', ['VectorSlideDownOp'])
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorArithConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorSlideUpOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorArithOp', '', ['VectorSlideUpOp'])
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorArithConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorConfigOp( *vecflags) {{
    iop = InstObjParams(name, Name, 'RiscvVectorCfgOp', vecflags)
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorConfigConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorMemoryStoreOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorMemOp', '',
    ['VectorMemoryStoreOp', 'IsStore', 'IsVector'])
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorMemoryConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorMemoryLoadOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorMemOp', '',
    ['VectorMemoryLoadOp', 'IsLoad', 'IsVector'])
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorMemoryConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorToScalarOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorToScalarOp')
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorToScalarConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorRegisterMoveOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorRegisterMoveOp')
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorRegisterMoveConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorIntegerWideningOp() {{
    iop = InstObjParams(name, Name, 'RiscvVectorIntegerWideningOp')
    header_output = BasicDeclare.subst(iop)
    decoder_output = VectorIntegerWideningConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};
